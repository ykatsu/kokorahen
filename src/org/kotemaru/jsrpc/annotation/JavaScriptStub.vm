
#set ($packagePath = "${packageName.replace('.','/')}")
#set ($className = "${masterClassDecl.simpleName}")

var ${className} = {};

${className}.__makeUrl = function(mname, args, offset) {
	var url = "/classes/${packagePath}/${className}."+mname;
	for (var i=offset; i<args.length; i++) {
		url += (i==offset ? '?' : '&');
		var n = i-offset;
		if (typeof args[i] == "object") {
			url += "a"+n+"="+encodeURI(JSON.stringify(args[i]));
		} else {
			url += "a"+n+"="+encodeURI(args[i]);
		}
	}
	return url;
};

${className}.__call = function(mname, args) {
	var url = ${className}.__makeUrl(mname, args, 0);
	var xreq = new XMLHttpRequest();
	xreq.open("GET", url, false);
	xreq.send();
	if (xreq.status/100 != 2) throw xreq.responseText;
	var res = JSON.parse(xreq.responseText);
	if (res.error) RPJS.errorHandler(res.error);
	return res.result;
};

${className}.__callAsync = function(mname, args) {
	var callback = args[0];
	var url = ${className}.__makeUrl(mname, args, 1);
	var xreq = new XMLHttpRequest();
	xreq.open("GET", url, true);
	xreq.onreadystatechange = function (ev) {
		if (xreq.readyState == 4) {
			if(xreq.status == 200) {
				setTimeout(function(){
				 try{
					var res = JSON.parse(xreq.responseText);
					if (res.error) RPJS.errorHandler(res.error,callback);
					callback.send(res.result);
 				 }catch(err){callback._throw(err);}
				},10);
			} else {
				callback._throw(err);
			}
		}
	}
	xreq.send();
};


#foreach( $method in $masterClassDecl.methods )
#set ($methodName = "${method.simpleName}")
#if (${helper.isPublic($method)} && ${helper.isStatic($method)}) 
${className}.${methodName} = function(${helper.getArguments($method)}){
	return ${className}.__call("${methodName}", arguments);
}
${className}.${methodName}Async = function(_callback ${helper.getArgumentsAfter($method)}){
	return ${className}.__callAsync("${methodName}", arguments);
}
#end
#end
